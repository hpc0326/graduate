{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/home/parallels/Desktop/gp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/parallels/Desktop/gp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NativeModules, Platform } from \"react-native\";\nvar RNNetworkInfo = NativeModules.RNNetworkInfo;\nvar NetworkInfo = {\n  getSSID: function () {\n    var _getSSID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return RNNetworkInfo.getSSID();\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getSSID() {\n      return _getSSID.apply(this, arguments);\n    }\n\n    return getSSID;\n  }(),\n  getBSSID: function () {\n    var _getBSSID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return RNNetworkInfo.getBSSID();\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getBSSID() {\n      return _getBSSID.apply(this, arguments);\n    }\n\n    return getBSSID;\n  }(),\n  getBroadcast: function () {\n    var _getBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return RNNetworkInfo.getBroadcast();\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getBroadcast() {\n      return _getBroadcast.apply(this, arguments);\n    }\n\n    return getBroadcast;\n  }(),\n  getIPAddress: function () {\n    var _getIPAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return RNNetworkInfo.getIPAddress();\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function getIPAddress() {\n      return _getIPAddress.apply(this, arguments);\n    }\n\n    return getIPAddress;\n  }(),\n  getIPV4Address: function () {\n    var _getIPV4Address = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var wifiIP;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return RNNetworkInfo.getWIFIIPV4Address();\n\n            case 2:\n              wifiIP = _context5.sent;\n\n              if (!(wifiIP && wifiIP !== '0.0.0.0')) {\n                _context5.next = 5;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", wifiIP);\n\n            case 5:\n              _context5.next = 7;\n              return RNNetworkInfo.getIPV4Address();\n\n            case 7:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function getIPV4Address() {\n      return _getIPV4Address.apply(this, arguments);\n    }\n\n    return getIPV4Address;\n  }(),\n  getGatewayIPAddress: function () {\n    var _getGatewayIPAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return RNNetworkInfo.getGatewayIPAddress();\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function getGatewayIPAddress() {\n      return _getGatewayIPAddress.apply(this, arguments);\n    }\n\n    return getGatewayIPAddress;\n  }(),\n  getSubnet: function () {\n    var _getSubnet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return RNNetworkInfo.getSubnet();\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function getSubnet() {\n      return _getSubnet.apply(this, arguments);\n    }\n\n    return getSubnet;\n  }(),\n  getFrequency: function () {\n    var _getFrequency = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(Platform.OS !== 'android')) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", null);\n\n            case 2:\n              _context8.next = 4;\n              return RNNetworkInfo.getFrequency();\n\n            case 4:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function getFrequency() {\n      return _getFrequency.apply(this, arguments);\n    }\n\n    return getFrequency;\n  }()\n};\nmodule.exports = {\n  NetworkInfo: NetworkInfo\n};","map":null,"metadata":{},"sourceType":"module"}